{
  "version": 3,
  "sources": ["../../random-seedable/src/PRNG.js", "../../random-seedable/src/PRNG64.js", "../../random-seedable/src/constants.js", "../../random-seedable/src/xorshift64.js", "../../random-seedable/src/lcg.js", "../../random-seedable/src/pcg.js", "../../random-seedable/src/mersenneTwister.js", "../../random-seedable/src/xorshift.js", "../../random-seedable/src/xorshift128.js", "../../random-seedable/src/xorshift128Plus.js", "../../random-seedable/src/xorwow.js", "../../random-seedable/src/index.js"],
  "sourcesContent": ["/**\n * Superclass for all implemented generators.\n */\nclass PRNG {\n  /**\n   * @constructor\n   * @param {number | bigint} max -> Max number that can be generated by this generator.\n   * @param {number | bigint} seed -> Initial seed.\n   */\n  constructor(max, seed) {\n    /**\n     * @protected\n     * @readonly\n     * @type {number | bigint}\n     */\n    this.max = max;\n    /**\n     * @protected\n     * @type {number | bigint}\n     */\n    this._seed = seed;\n  }\n\n  /**\n   * Casts the given BigInt number to an unsigned big int with the given\n   * number of bits.\n   *\n   * @protected\n   * @param {bigint} number -> A string param.\n   * @param {number} bits -> An optional param (Closure syntax)\n   * @return {bigint} This is the result\n   */\n  cast(number, bits) {\n    return BigInt.asUintN(bits, number);\n  }\n\n  /**\n   * Checks that a given number is within the range.\n   *\n   * @protected\n   * @param {number} number -> A string param.\n   * @throws Error -> Number greater than max.\n   */\n  checkNum(number) {\n    if (number > this.max) {\n      throw new Error(`Number greater than ${this.max}`);\n    }\n  }\n\n  /**\n   * Resets the PRNG.\n   * To be implemented by sub-classes.\n   *\n   * @public\n   * @throws Error -> Method not implemented.\n   */\n  reset() {\n    if (this.constructor === PRNG) {\n      throw new Error('Method not implemented');\n    }\n  }\n\n  /**\n   * Private method for integer generation.\n   * To be implemented by sub-classes.\n   *\n   * @protected\n   * @return {bigint} Random integer.\n   */\n  _int() {\n    if (this.constructor === PRNG) {\n      throw new Error('Method not implemented');\n    }\n    return BigInt(0);\n  }\n\n  /**\n   * Generates a boolean with the formula random.float() >= 0.5\n   *\n   * @example\n   * random.bool();\n   *\n   * @example\n   * random.bool(); // true\n   *\n   * @public\n   * @returns {boolean} True/False.\n   */\n  bool() {\n    return this.float() >= 0.5;\n  }\n\n  /**\n   * Generates a random boolean with probability of it being true denoted by the pTrue parameter.\n   * For example, when pTrue=0.8, 80% of the numbers generated with this method will be true.\n   *\n   * @example\n   * random.coin(pTrue);\n   *\n   * @example\n   * random.coin(0.8); // true\n   *\n   * @public\n   * @param {number} pTrue -> Probability of generating a true value.\n   * @returns {boolean} True/False.\n   */\n  coin(pTrue = 0.5) {\n    return this.float() < pTrue;\n  }\n\n  /**\n   * Generates and returns the next number in the PRNGs sequence.\n   *\n   * @example\n   * random.int();\n   *\n   * @example\n   * random.int(); // 85424123\n   *\n   * @public\n   * @returns {number} Number less than 2 ** 32 for 32 bit generators.\n   */\n  int() {\n    return Number(this._int());\n  }\n\n  /**\n   * Generates and returns the next number in the PRNGs sequence and returns it as a Bigint.\n   *\n   * @example\n   * random.bigInt();\n   *\n   * @example\n   * random.bigInt(); // 85424123n\n   *\n   * @public\n   * @returns {bigint} Number less than 2 ** 32 for 32 bit generators represented as a BigInt class.\n   */\n  bigInt() {\n    return this._int();\n  }\n\n  /**\n   * Generates a random floating point number.\n   *\n   * @example\n   * random.float();\n   *\n   * @example\n   * random.float(); // 0.234242\n   *\n   * @public\n   * @returns {number} Float between 0.0 - 1.0.\n   */\n  float() {\n    return this.int() * (1.0 / this.max);\n  }\n\n  /**\n   * Generates a random floating point number.\n   *\n   * @example\n   * random.float53();\n   *\n   * @example\n   * random.float53(); // 0.2342422341231\n   *\n   * @public\n   * @returns {number} Float between 0.0 - 1.0.\n   */\n  float53() {\n    const a = this.int() >>> 5;\n    const b = this.int() >>> 6;\n\n    return (a * 67108864.0 + b) * (1.0 / 9007199254740992.0);\n  }\n\n  /**\n   * Generates a number within the given range.\n   *\n   * @example\n   * random.randRange(min, max);\n   *\n   * @example\n   * const lowerBound = 4;\n   * const upperBound = 2432;\n   * random.randRange(lowerBound, upperBound); // 36.\n   *\n   * @public\n   * @param {number} min -> Lower bound of the numbers to generate (inclusive).\n   * @param {number} max -> Upper bound of the numbers to generate (inclusive).\n   * @returns {number} Number min <= Number <= max.\n   */\n  randRange(min, max) {\n    // Debiased Modulo method,\n    // https://docs.oracle.com/javase/6/docs/api/java/util/Random.html#nextInt%28int%29\n    // https://peteroupc.github.io/randomnotes.html\n    // https://www.pcg-random.org/posts/bounded-rands.html\n    const range = max - min;\n    const t = this.max % range;\n    let r = this.int();\n\n    while (r < t) {\n      r = this.int();\n    }\n\n    return min + (r % range);\n  }\n\n  /**\n   * Generates a number below the given maximum.\n   *\n   * @example\n   * random.randBelow(max);\n   *\n   * @example\n   * const upperBound = 2432;\n   * random.randBelow(upperBound);  // 285.\n   *\n   * @public\n   * @param {number} max -> Upper bound of the numbers to generate (inclusive).\n   * @returns {number} Number <= max\n   */\n  randBelow(max) {\n    return this.randRange(0, max);\n  }\n\n  /**\n   * Picks a random element from the array.\n   *\n   * @example\n   * random.choice(array)\n   *\n   * @example\n   * const arr = [1, 4, 2, 3];\n   * random.choice(arr); // 4\n   *\n   * @public\n   * @param {any[]} array -> Array of any type from which we randomly select one item.\n   * @returns {any} A single item from the array of type ?.\n   */\n  choice(array) {\n    return array[this.randBelow(array.length)];\n  }\n\n  /**\n   * Randomly shuffles the given array using the fisher-yates algorithm.\n   *\n   * @example\n   * random.shuffle(array, inPlace = false)\n   *\n   * @example\n   * const arr = [1, 4, 2, 3];\n   * const shuffled = random.shuffle(arr, false);\n   * console.log(arr); // [1, 4, 2, 3]\n   * console.log(shuffled); // [4, 2, 3, 1]\n   *\n   * @example\n   * const arr = [1, 4, 2, 3];\n   * const shuffled = random.shuffle(arr, true);\n   * console.log(arr); // [4, 2, 3, 1]\n   * console.log(shuffled); // [4, 2, 3, 1]\n   *\n   * @public\n   * @param {any[]} array -> Array of any type to be shuffled.\n   * @param {boolean} inPlace -> Shuffle the array (true) or shuffle a copy of array (false).\n   * @returns {any[]} Array shuffled (inPlace === false), shuffled copy of array (inPlace === true).\n   */\n  shuffle(array, inPlace = true) {\n    let toSort = array;\n\n    if (!inPlace) {\n      toSort = Array.from(toSort);\n    }\n\n    // https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle.\n    for (let i = toSort.length - 1; i > 0; i--) {\n      const j = this.randRange(0, i);\n      const temp = toSort[i];\n      toSort[i] = toSort[j];\n      toSort[j] = temp;\n    }\n\n    return toSort;\n  }\n\n  /**\n   * Creates an array of the given size populated with the result of the mapFn.\n   *\n   * @protected\n   * @param {number} size -> Length of the array to create.\n   * @param {function(): boolean | number | bigint} mapFn -> Function which we use to fill array.\n   * @returns {boolean[] | number[] | bigint[]} Array created by repeated calls to the mapFn.\n   */\n  initArray(size, mapFn) {\n    return Array.from({ length: size }, mapFn);\n  }\n\n  /**\n   * Generates an n size array populated with booleans.\n   *\n   * @example\n   * random.boolArray(size);\n   *\n   * @example\n   * const size = 256;\n   * random.boolArray(size);\n   *\n   * @public\n   * @param {number} size -> Size of the array to generate.\n   * @returns {boolean[]} Array[Boolean] of length size.\n   */\n  boolArray(size) {\n    return this.initArray(size, () => this.bool());\n  }\n\n  /**\n   * Generates an n size array of random booleans with probability of it being true\n   * denoted by the pTrue parameter. For example, when pTrue=0.8, 80% of the numbers\n   * in the generated array will be true.\n   *\n   * @example\n   * random.coinArray(size, pTrue);\n   *\n   * @example\n   * const size = 256;\n   * const pTrue = 0.8;\n   * random.coinArray(size, pTrue);\n   *\n   * @public\n   * @param {number} size -> Size of the array to generate.\n   * @param {number} pTrue -> Probability of generating a true value.\n   * @returns {boolean[]} Array[Boolean] of length size.\n   */\n  coinArray(size, pTrue = 0.5) {\n    return this.initArray(size, () => this.coin(pTrue));\n  }\n\n  /**\n   * Generates an n size array populated with integers.\n   *\n   * @example\n   * random.intArray(size);\n   *\n   * @example\n   * const size = 256;\n   * random.intArray(size);\n   *\n   * @public\n   * @param size -> Size of the array to generate.\n   * @returns {number[]} Array[Number] of length size.\n   */\n  intArray(size) {\n    return this.initArray(size, () => this.int());\n  }\n\n  /**\n   * Generates an n size array populated with Big Integers.\n   *\n   * @example\n   * random.bigIntArray(size);\n   *\n   * @example\n   * const size = 256;\n   * random.bigIntArray(size);\n   *\n   * @public\n   * @param size -> Size of the array to generate.\n   * @returns {bigint[]} Array[BigInt] of length size.\n   */\n  bigIntArray(size) {\n    return this.initArray(size, () => this.bigInt());\n  }\n\n  /**\n   * Generates an n size array populated within the given range.\n   *\n   * @example\n   * random.randRangeArray(size, min, max);\n   *\n   * @example\n   * const size = 256;\n   * const lowerBound = 4;\n   * const upperBound = 2432;\n   * random.randRangeArray(size, lowerBound, upperBound);\n   *\n   * @public\n   * @param {number} size -> Size of the array to generate.\n   * @param {number} min -> Lower bound of the numbers to generate (inclusive).\n   * @param {number} max -> Upper bound of the numbers to generate (inclusive).\n   * @returns {number[]} Array[Number] of length size filled w/ min <= num <= max.\n   */\n  randRangeArray(size, min, max) {\n    return this.initArray(size, () => this.randRange(min, max));\n  }\n\n  /**\n   * Generates an n size array populated with floats.\n   *\n   * @example\n   * random.floatArray(size);\n   *\n   * @example\n   * const size = 256;\n   * random.floatArray(size);\n   *\n   * @public\n   * @param size -> Size of the array to generate.\n   * @returns {number[]} Array[Number] between 0.0 - 1.0 of length size.\n   */\n  floatArray(size) {\n    return this.initArray(size, () => this.float());\n  }\n\n  /**\n   * Generates an n size array populated with floats.\n   *\n   * @example\n   * random.float53Array(size);\n   *\n   * @example\n   * const size = 256;\n   * random.float53Array(size);\n   *\n   * @public\n   * @param size -> Size of the array to generate.\n   * @returns {number[]} Array[Number] between 0.0 - 1.0 of length size.\n   */\n  float53Array(size) {\n    return this.initArray(size, () => this.float53());\n  }\n}\n\nexport default PRNG;\n", "import PRNG from './PRNG.js';\n\n/**\n * 64 bit modification of PRNG class.\n * @class\n * @extends {PRNG}\n * @param {number | bigint} max -> Max number that can be generated by this generator.\n * @param {number | bigint} seed -> Initial seed.\n */\nclass PRNG64 extends PRNG {\n  /**\n   * @constructor\n   * @param {number | bigint} max -> Max number that can be generated by this generator.\n   * @param {number | bigint} seed -> Initial seed.\n   */\n  constructor(max, seed) {\n    super(max, seed);\n  }\n\n  /**\n   * Generates and returns the next number in the PRNGs sequence.\n   * As this is a 64 bit generator and javascript integers are limited to 53 bits,\n   * the generated BigInt result is right-shifted 11 bits; discarding the least significant bits.\n   *\n   * @example\n   * random.int();\n   *\n   * @example\n   * random.int(); // 85424123\n   *\n   * @public\n   * @returns {number} Number less than 2 ** 53 for 64 bit generators.\n   */\n  int() {\n    // Javascript only has 2 ** 53 integer positions, take 64 bit output and only take the upper 53 bits for use\n    // as our output Number in int mode.\n    return Number(this._int() >> 11n);\n  }\n\n  /**\n   * Generates a random floating point number.\n   *\n   * @example\n   * random.float();\n   *\n   * @example\n   * random.float(); // 0.234242\n   *\n   * @public\n   * @returns {number} Float between 0.0 - 1.0.\n   */\n  float() {\n    return this.int() / this.max;\n  }\n\n  /**\n   * Generates a random floating point number.\n   *\n   * @example\n   * random.float53();\n   *\n   * @example\n   * random.float53(); // 0.2342422341231\n   *\n   * @public\n   * @returns {number} Float between 0.0 - 1.0.\n   */\n  float53() {\n    return this.float();\n  }\n}\n\nexport default PRNG64;\n", "/** @type {number} */\nexport const MAX32 = 2 ** 32;\n/** @type {number} */\nexport const MAX53 = 2 ** 53;\n/** @type {bigint} */\nexport const MAX64 = 2n ** 64n;\n\n/** @enum {number | bigint} */\nexport default {\n  MAX32,\n  MAX53,\n  MAX64,\n};\n", "import PRNG64 from './PRNG64.js';\nimport { MAX53 } from './constants.js';\n\n/**\n * XorShift generators are fast, efficient generators with good randomness quality.\n * This implementation has 64 bit output with 64 bits of internal state.\n *\n * @example\n * const random = new XORShift64(11234, 13, 7, 17);\n *\n * @class\n * @extends {PRNG64}\n * @param {number | bigint} seed -> Initial seed.\n * @param {number | bigint} a -> First bit shift parameter.\n * @param {number | bigint} b -> Second bit shift parameter.\n * @param {number | bigint} c -> Third bit shift parameter.\n */\nclass XORShift64 extends PRNG64 {\n  /**\n   * @constructor\n   * @param {number | bigint} seed -> Initial seed.\n   * @param {number | bigint} a -> First bit shift parameter.\n   * @param {number | bigint} b -> Second bit shift parameter.\n   * @param {number | bigint} c -> Third bit shift parameter.\n   */\n  constructor(seed = Date.now(), a = 13, b = 7, c = 17) {\n    super(MAX53, BigInt(seed));\n    this.seed = seed;\n    /**\n     * @private\n     * @type {BigInt}\n     */\n    this.a = this.cast(BigInt(a), 64);\n    /**\n     * @private\n     * @type {BigInt}\n     */\n    this.b = this.cast(BigInt(b), 64);\n    /**\n     * @private\n     * @type {BigInt}\n     */\n    this.c = this.cast(BigInt(c), 64);\n  }\n\n  /**\n   * Resets the generator to its original state.\n   */\n  reset() {\n    this.x = this.seed;\n  }\n\n  /**\n   * Seed getter.\n   *\n   * @public\n   * @returns {number | bigint} Retrieves seed.\n   */\n  get seed() {\n    return this._seed;\n  }\n\n  /**\n   * Converts seed into BigInt + takes steps to reset generator.\n   *\n   * @public\n   * @param {number | bigint} seed -> New seed to set.\n   */\n  set seed(seed) {\n    this._seed = this.cast(BigInt(seed), 64);\n    this.x = this._seed;\n  }\n\n  _int() {\n    let { x } = this;\n    x ^= x << this.a;\n    x = this.cast(x, 64);\n    x ^= x >> this.b;\n    x ^= x << this.c;\n    x = this.cast(x, 64);\n    this.x = x;\n    return x;\n  }\n}\n\nexport default XORShift64;\n", "import PRNG from './PRNG.js';\n\n/**\n * Linear Congruential Generator (LCG) is a simple generator originally devised in 1951,\n * if you need something quick with minimal memory usage and not the best quality randomness,\n * this is for you. 32 bits of output.\n *\n * @example\n * const random = new LCG(1234, 1664525, 1013904223, 4294967296);\n *\n * @class\n * @extends {PRNG}\n * @param {number} seed ->  Initial seed.\n * @param {number} a -> Multiplier parameter.\n * @param {number} c -> Increment parameter.\n * @param {number} m -> Modulus parameter.\n */\nclass LCG extends PRNG {\n  /**\n   * @constructor\n   * @param {number} seed ->  Initial seed.\n   * @param {number} a -> Multiplier parameter.\n   * @param {number} c -> Increment parameter.\n   * @param {number} m -> Modulus parameter.\n   */\n  constructor(seed = Date.now(), a = 1664525, c = 1013904223, m = 4294967296) {\n    super(m, seed);\n    [seed, a, c, m].forEach((num) => this.checkNum(num));\n    this.seed = seed;\n    Object.assign(this, { a, c, m }); // Group assignment for brevity.\n  }\n\n  /**\n   * Resets the generator to its original state.\n   */\n  reset() {\n    this.x = this.seed;\n  }\n\n  /**\n   * Seed getter.\n   *\n   * @public\n   * @returns {number | bigint} Retrieves seed.\n   */\n  get seed() {\n    return this._seed;\n  }\n\n  /**\n   * Converts seed into BigInt + takes steps to reset generator.\n   * @param {number | bigint} seed -> New seed to set.\n   */\n  set seed(seed) {\n    this._seed = seed;\n    this.x = this._seed;\n  }\n\n  _int() {\n    this.x = (this.a * this.x + this.c) % this.m;\n    return BigInt(this.x);\n  }\n}\n\nexport default LCG;\n", "import PRNG from './PRNG.js';\r\nimport { MAX32 } from './constants.js';\r\n\r\n/**\r\n * Permuted Congruential Generator (PCG) is again, a relatively simple generator that improves on the qualites\r\n * of LCG by improving its randomness quality by increasing its state size and using only the most significant bits\r\n * to produce the output. 32 bits of output.\r\n *\r\n * @example\r\n * const random = new PCG(Date.now(), 6364136223846793005n, 1442695040888963407n);\r\n *\r\n * @class\r\n * @extends {PRNG}\r\n * @param {number | bigint} seed -> Initial seed.\r\n * @param {number | bigint} mul -> Multiplier parameter.\r\n * @param {number | bigint} inc -> Increment parameter.\r\n */\r\nclass PCG extends PRNG {\r\n  // constructor(seed = 0x4d595df4d0f33173n, mul = 6364136223846793005n, inc = 1442695040888963407n) {\r\n  /**\r\n   * @constructor\r\n   * @param {number | bigint} seed -> Initial seed.\r\n   * @param {number | bigint} mul -> Multiplier parameter.\r\n   * @param {number | bigint} inc -> Increment parameter.\r\n   */\r\n  constructor(seed = Date.now(), mul = 6364136223846793005n, inc = 1442695040888963407n) {\r\n    super(MAX32, BigInt(seed));\r\n    this.seed = seed;\r\n    /**\r\n     * @private\r\n     * @type {bigint}\r\n     */\r\n    this.mul = this.cast(BigInt(mul), 64);\r\n    /**\r\n     * @private\r\n     * @type {bigint}\r\n     */\r\n    this.inc = this.cast(BigInt(inc), 64);\r\n  }\r\n\r\n  /**\r\n   * Resets the generator to its original state.\r\n   */\r\n  reset() {\r\n    this.x = this.seed;\r\n  }\r\n\r\n  /**\r\n   * Seed getter.\r\n   *\r\n   * @public\r\n   * @returns {number | bigint} Retrieves seed.\r\n   */\r\n  get seed() {\r\n    return this._seed;\r\n  }\r\n\r\n  /**\r\n   * Converts seed into BigInt + sets.\r\n   *\r\n   * @param {number | bigint} seed -> New seed to set.\r\n   */\r\n  set seed(seed) {\r\n    this._seed = this.cast(BigInt(seed), 64);\r\n    this.x = this._seed;\r\n  }\r\n\r\n  /**\r\n   * 32 bit rotation op.\r\n   * @param {bigint} x -> x parameter of PCG algorithm.\r\n   * @param {bigint} r -> r parameter of PCG algorithm.\r\n   * @returns {bigint} Returns 32 bit result of rotation operation.\r\n   */\r\n  rotr32(x, r) {\r\n    return this.cast(x >> r | x << (-r & 31n), 32);\r\n  }\r\n\r\n  _int() {\r\n    let x = this.x;\r\n    let count = x >> 59n; // 59 = 64 - 5\r\n    this.x = x * this.mul + this.inc;\r\n    this.x = this.cast(this.x, 64);\r\n    x ^= x >> 18n; // 18 = (64 - 27) / 2\r\n    return this.rotr32(this.cast((x >> 27n), 32), count); // 27 = 32 - 5\r\n  }\r\n}\r\n\r\nexport default PCG;\r\n", "import PRNG from './PRNG.js';\nimport { MAX32 } from './constants.js';\n\n/** @type {bigint} */\nconst MATRIX_A = 0x9908b0dfn; /* constant vector a */\n/** @type {bigint} */\nconst UPPER_MASK = 0x80000000n; /* most significant w-r bits */\n/** @type {bigint} */\nconst LOWER_MASK = 0x7fffffffn; /* least significant r bits */\n\n// https://github.com/boo1ean/mersenne-twister/blob/master/src/mersenne-twister.js\n//   https://gist.github.com/banksean/300494\n//     https://upload.wikimedia.org/wikipedia/commons/b/b5/Mersenne_Twister_visualisation.svg\n// https://gitlab.com/rockerest/fast-mersenne-twister/-/blob/master/mersenne.js\n\n/**\n * Mersenne Twister is a widely used PRNG, most well known for being the Python and Excel\n * default with an extremely large state. 32 bits of output.\n *\n * @example\n * const random = new MersenneTwister(5489, 624, 397);\n *\n * @class\n * @extends {PRNG}\n * @param {number | bigint} seed -> Initial seed.\n * @param {number | bigint} n -> Degree of recurrence.\n * @param {number | bigint} m -> Middle word, offset used during recurrence.\n */\nclass MersenneTwister extends PRNG {\n  /**\n   * @constructor\n   * @param {number | bigint} seed -> Initial seed.\n   * @param {number | bigint} n -> Degree of recurrence.\n   * @param {number | bigint} m -> Middle word, offset used during recurrence.\n   */\n  constructor(seed = Date.now(), n = 624, m = 397) {\n    super(MAX32, BigInt(seed));\n    this.state = new Array(n);\n    this.N = n;\n    this.M = m;\n    this.initf = 0;\n    this.stateIndex = 0;\n\n    // Trigger seed setter after all variables initialised.\n    this.seed = seed;\n  }\n\n  /**\n   * Resets the generator to its original state.\n   *\n   * @public\n   */\n  reset() {\n    this.seed = this._seed;\n  }\n\n  /**\n   * Seed getter.\n   *\n   * @public\n   * @returns {number | bigint} Retrieves seed.\n   */\n  get seed() {\n    return this._seed;\n  }\n\n  /**\n   * Converts seed into BigInt + takes steps to reset generator.\n   *\n   * @public\n   * @param {number | bigint} seed -> New seed to set.\n   */\n  set seed(seed) {\n    this._seed = this.cast(BigInt(seed), 32);\n    this.state[0] = this._seed & 0xffffffffn;\n\n    for (let j = 1; j < this.N; j++) {\n      this.state[j] = (1812433253n * (this.state[j - 1] ^ (this.state[j - 1] >> 30n)) + BigInt(j));\n      /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */\n      /* In the previous versions, MSBs of the seed affect   */\n      /* only MSBs of the array state[].                        */\n      /* 2002/01/09 modified by Makoto Matsumoto             */\n      this.state[j] &= 0xffffffffn; /* for >32 bit machines */\n    }\n    this.initf = 1;\n  }\n\n  /**\n   * @private\n   * @param {bigint} u\n   * @param {bigint} v\n   * @returns {bigint}\n   */\n  mixBits(u, v) {\n    return (((u) & UPPER_MASK) | ((v) & LOWER_MASK));\n  }\n\n  /**\n   * Computes the twist function.\n   * @private\n   * @param {bigint} u\n   * @param {bigint} v\n   * @returns {bigint}\n   */\n  twist(u, v) {\n    return ((this.mixBits(u, v) >> 1n) ^ ((v) & 1n ? MATRIX_A : 0n));\n  }\n\n  /**\n   * Computes the next state of the generator.\n   * @private\n   */\n  nextState() {\n    let j = 0;\n\n    for (; j < this.N - this.M; j++) {\n      this.state[j] = this.state[j + this.M] ^ this.twist(this.state[j], this.state[j + 1]);\n    }\n\n    for (; j < this.N - 1; j++) {\n      this.state[j] = this.state[j + (this.M - this.N)] ^ this.twist(this.state[j], this.state[j + 1]);\n    }\n\n    this.state[this.N - 1] = this.state[this.M - 1] ^ this.twist(this.state[this.N - 1], this.state[0]);\n    this.stateIndex = 0;\n    this.initf = 0;\n  }\n\n  _int() {\n    let y;\n\n    if (this.stateIndex >= this.N || this.initf) {\n      this.nextState();\n    }\n\n    y = this.state[this.stateIndex++];\n\n    /* Tempering */\n    y ^= (y >> 11n);\n    y ^= (y << 7n) & 0x9d2c5680n;\n    y ^= (y << 15n) & 0xefc60000n;\n    y ^= (y >> 18n);\n\n    return y;\n  }\n}\n\nexport default MersenneTwister;\n", "import PRNG from './PRNG.js';\nimport { MAX32 } from './constants.js';\n\n/**\n * XorShift generators are fast, efficient generators with good randomness quality.\n * This generator has 32 bit output with 32 bits of internal state.\n *\n * @example\n * const random = new XORShift(11234, 13, 17, 5);\n *\n * @class\n * @extends {PRNG}\n * @param {number | bigint} seed -> Initial seed.\n * @param {number | bigint} a -> First bit shift parameter.\n * @param {number | bigint} b -> Second bit shift parameter.\n * @param {number | bigint} c -> Third bit shift parameter.\n */\nclass XORShift extends PRNG {\n  /**\n   * @constructor\n   * @param {number | bigint} seed -> Initial seed.\n   * @param {number | bigint} a -> First bit shift parameter.\n   * @param {number | bigint} b -> Second bit shift parameter.\n   * @param {number | bigint} c -> Third bit shift parameter.\n   */\n  constructor(seed = Date.now(), a = 13, b = 17, c = 5) {\n    super(MAX32, BigInt(seed));\n    this.seed = seed;\n    /**\n     * @private\n     * @type {BigInt}\n     */\n    this.a = this.cast(BigInt(a), 32);\n    /**\n     * @private\n     * @type {BigInt}\n     */\n    this.b = this.cast(BigInt(b), 32);\n    /**\n     * @private\n     * @type {BigInt}\n     */\n    this.c = this.cast(BigInt(c), 32);\n  }\n\n  /**\n   * Resets the generator to its original state.\n   */\n  reset() {\n    this.x = this.seed;\n  }\n\n  /**\n   * Seed getter.\n   *\n   * @public\n   * @returns {number | bigint} Retrieves seed.\n   */\n  get seed() {\n    return this._seed;\n  }\n\n  /**\n   * Converts seed into BigInt + takes steps to reset generator.\n   *\n   * @public\n   * @param {number | bigint} seed -> New seed to set.\n   */\n  set seed(seed) {\n    this._seed = this.cast(BigInt(seed), 32);\n    this.x = this._seed;\n  }\n\n  _int() {\n    let { x } = this;\n    x ^= x << this.a;\n    // Recast to uint32. BigInt on a left shift will always shift and keep digits regardless\n    // of previous casting. Therefore re-cast is necessary to ensure code behaves the same w/r to _seed c behaviour.\n    x = this.cast(x, 32);\n    x ^= x >> this.b;\n    x ^= x << this.c;\n    x = this.cast(x, 32);\n    this.x = x;\n    return x;\n  }\n}\n\nexport default XORShift;\n", "import PRNG from './PRNG.js';\nimport { MAX32 } from './constants.js';\n\n/**\n * XorShift generators are fast, efficient generators with good randomness quality. This implementation\n * has 32 bit output with 128 bits of internal state.\n *\n * @example\n * const random = new XORShift128(Date.now(), 362436069, 521288629, 88675123);\n *\n * @class\n * @extends {PRNG}\n * @param {number | bigint} seed -> Initial seed.\n * @param {number | bigint} y -> First bit shift parameter.\n * @param {number | bigint} z -> Second bit shift parameter.\n * @param {number | bigint} w -> Third bit shift parameter.\n */\nclass XORShift128 extends PRNG {\n  /**\n   * @constructor\n   * @param {number | bigint} seed -> Initial seed.\n   * @param {number | bigint} y -> First bit shift parameter.\n   * @param {number | bigint} z -> Second bit shift parameter.\n   * @param {number | bigint} w -> Third bit shift parameter.\n   */\n  constructor(seed = Date.now(), y = 362436069, z = 521288629, w = 88675123) {\n    super(MAX32, BigInt(seed));\n    this.seed = seed;\n    this.y = this.cast(BigInt(y), 32);\n    this.z = this.cast(BigInt(z), 32);\n    this.w = this.cast(BigInt(w), 32);\n    this.origParams = {\n      y: this.y, z: this.z, w: this.w,\n    };\n  }\n\n  /**\n   * Resets the generator to its original state.\n   */\n  reset() {\n    this.x = this.seed;\n    Object.assign(this, this.origParams);\n  }\n\n  /**\n   * Seed getter.\n   *\n   * @public\n   * @returns {number | bigint} Retrieves seed.\n   */\n  get seed() {\n    return this._seed;\n  }\n\n  /**\n   * Converts seed into BigInt + takes steps to reset generator.\n   *\n   * @public\n   * @param {number | bigint} seed -> New seed to set.\n   */\n  set seed(seed) {\n    this._seed = this.cast(BigInt(seed), 32);\n    this.reset();\n  }\n\n  _int() {\n    let { x, w } = this;\n\n    x ^= x << 11n;\n    x = this.cast(x, 32);\n    x ^= x >> 8n;\n    w ^= w >> 19n;\n\n    this.x = this.y;\n    this.y = this.z;\n    this.z = this.w;\n    this.w = w ^ x;\n    return this.w;\n  }\n}\n\nexport default XORShift128;\n", "import PRNG64 from './PRNG64.js';\nimport { MAX53 } from './constants.js';\n\n/**\n * XorShift generators are fast, efficient generators with good randomness quality.\n * 64 bits of output with 128 internal state.\n *\n * @example\n * const random = new XORShift128Plus(Date.now(), 362436069);\n *\n * @class\n * @extends {PRNG64}\n * @param {number | bigint} seed -> Initial seed.\n * @param {number | bigint} y -> Second seed.\n */\nclass XORShift128Plus extends PRNG64 {\n  /**\n   * @constructor\n   * @param {number | bigint} seed -> Initial seed.\n   * @param {number | bigint} y -> Second seed.\n   */\n  constructor(seed = Date.now(), y = 362436069) {\n    super(MAX53, seed);\n    this.seed = seed;\n    this.y = this.cast(BigInt(y), 64);\n    this.origParams = { y: this.y };\n  }\n\n  /**\n   * Resets the generator to its original state.\n   */\n  reset() {\n    this.x = this.seed;\n    Object.assign(this, this.origParams);\n  }\n\n  /**\n   * Seed getter.\n   *\n   * @public\n   * @returns {number | bigint} Retrieves seed.\n   */\n  get seed() {\n    return this._seed;\n  }\n\n  /**\n   * Converts seed into BigInt + takes steps to reset generator.\n   *\n   * @public\n   * @param {number | bigint} seed -> New seed to set.\n   */\n  set seed(seed) {\n    this._seed = this.cast(BigInt(seed), 64);\n    this.reset();\n  }\n\n  _int() {\n    let s1 = this.x;\n    const s0 = this.y;\n    const result = this.cast(s0 + s1, 64);\n    this.x = s0;\n    s1 ^= s1 << 23n; // a\n    s1 = this.cast(s1, 64);\n    this.y = s1 ^ s0 ^ (s1 >> 18n) ^ (s0 >> 5n); // b, c\n    return result;\n  }\n}\n\nexport default XORShift128Plus;\n", "import PRNG from './PRNG.js';\nimport { MAX32 } from './constants.js';\n\n/**\n * XorWow is an improved version of XorShift and default generator of Nvidia CUDA. 32 bits of output.\n *\n * @example\n * const random = new XORWow(123456789, 362436069, 521288629, 88675123, 5783321, 6615241, 362437);\n *\n * @class\n * @extends {PRNG}\n * @param {number | bigint} seed -> Initial seed.\n * @param {number | bigint} y -> First state initial value.\n * @param {number | bigint} z -> Second state initial value.\n * @param {number | bigint} w -> Third state initial value.\n * @param {number | bigint} v -> Fourth state initial value.\n * @param {number | bigint} d -> Fifth state initial value.\n * @param {number | bigint} weyl -> Additive counter.\n */\nclass XORWow extends PRNG {\n  /**\n   * @constructor\n   * @param {number | bigint} seed -> Initial seed.\n   * @param {number | bigint} y -> First state initial value.\n   * @param {number | bigint} z -> Second state initial value.\n   * @param {number | bigint} w -> Third state initial value.\n   * @param {number | bigint} v -> Fourth state initial value.\n   * @param {number | bigint} d -> Fifth state initial value.\n   * @param {number | bigint} weyl -> Additive counter.\n   */\n  constructor(seed = Date.now(), y = 362436069, z = 521288629, w = 88675123,\n    v = 5783321, d = 6615241, weyl = 362437) {\n    super(MAX32, BigInt(seed));\n    // Other PRNGs call the seed setter, we do not do this here as it would add too much complexity to the function.\n    this._seed = this.cast(this._seed, 32);\n    this.x = this._seed;\n\n    this.y = this.cast(BigInt(y), 32);\n    this.z = this.cast(BigInt(z), 32);\n    this.w = this.cast(BigInt(w), 32);\n    this.v = this.cast(BigInt(v), 32);\n    this.d = this.cast(BigInt(d), 32);\n    this.weyl = this.cast(BigInt(weyl), 32);\n\n    this.origParams = {\n      y: this.y, z: this.z, w: this.w, v: this.v, d: this.d,\n    };\n  }\n\n  /**\n   * Resets the generator to its original state.\n   */\n  reset() {\n    this.x = this.seed;\n    Object.assign(this, this.origParams);\n  }\n\n  /**\n   * Seed getter.\n   *\n   * @public\n   * @returns {number | bigint} Retrieves seed.\n   */\n  get seed() {\n    return this._seed;\n  }\n\n  /**\n   * Converts seed into BigInt + takes steps to reset generator.\n   *\n   * @public\n   * @param {number | bigint} seed -> New seed to set.\n   */\n  set seed(seed) {\n    this._seed = this.cast(BigInt(seed), 32);\n    this.reset();\n  }\n\n  _int() {\n    let t = this.x;\n    let { v } = this;\n\n    t ^= t >> 2n;\n    t ^= t << 1n;\n    v ^= v << 4n;\n\n    this.x = this.y;\n    this.y = this.z;\n    this.z = this.w;\n    this.w = this.v;\n    this.v = this.cast(v ^ t, 32);\n    this.d += this.weyl;\n    return this.cast(this.d + this.v, 32);\n  }\n}\n\nexport default XORWow;\n", "import XORShift64 from './xorshift64.js';\n\nexport { default as LCG } from './lcg.js';\nexport { default as PCG } from './pcg.js';\nexport { default as MersenneTwister } from './mersenneTwister.js';\nexport { default as XORShift } from './xorshift.js';\nexport { default as XORShift64 } from './xorshift64.js';\nexport { default as XORShift128 } from './xorshift128.js';\nexport { default as XORShift128Plus } from './xorshift128Plus.js';\nexport { default as XORWow } from './xorwow.js';\n\nexport const random = new XORShift64(Date.now());\nexport default new XORShift64(Date.now());\n"],
  "mappings": "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",
  "names": []
}
